// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function observe(operation, source) {
  Curry._1(source, /* Start */Block.__(0, [(function (t) {
              if (typeof t === "number" || !t.tag) {
                return /* () */0;
              } else {
                return Curry._1(operation, t[0]);
              }
            })]));
  return /* () */0;
}

function interval(period, _type) {
  var timeoutId = [/* None */0];
  if (typeof _type === "number") {
    return /* () */0;
  } else if (_type.tag) {
    return /* () */0;
  } else {
    var sink = _type[0];
    var startInterval = function (num, callbag) {
      timeoutId[0] = /* Some */[setTimeout((function () {
                Curry._1(callbag, /* Data */Block.__(1, [num + 1 | 0]));
                return startInterval(num + 1 | 0, callbag);
              }), period)];
      return /* () */0;
    };
    startInterval(0, sink);
    Curry._1(sink, /* Start */Block.__(0, [(function (_type) {
                if (typeof _type === "number") {
                  var match = timeoutId[0];
                  if (match) {
                    clearTimeout(match[0]);
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                } else {
                  return /* () */0;
                }
              })]));
    return /* () */0;
  }
}

observe((function (d) {
        console.log(d);
        return /* () */0;
      }), (function (param) {
        return interval(1000, param);
      }));

exports.observe  = observe;
exports.interval = interval;
/*  Not a pure module */
