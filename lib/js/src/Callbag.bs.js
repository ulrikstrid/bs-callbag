// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block   = require("bs-platform/lib/js/block.js");
var Curry   = require("bs-platform/lib/js/curry.js");

function observe(operation, source) {
  Curry._1(source, /* Start */Block.__(0, [(function (t) {
              if (typeof t === "number" || !t.tag) {
                return /* () */0;
              } else {
                return Curry._1(operation, t[0]);
              }
            })]));
  return /* () */0;
}

function interval(period, _type) {
  var num = [0];
  if (typeof _type === "number") {
    return /* () */0;
  } else if (_type.tag) {
    return /* () */0;
  } else {
    var sink = _type[0];
    var intervalId = setInterval((function () {
            Curry._1(sink, /* Data */Block.__(1, [num[0]]));
            num[0] = num[0] + 1 | 0;
            return /* () */0;
          }), period);
    return Curry._1(sink, /* Start */Block.__(0, [(function (t) {
                      if (typeof t === "number") {
                        clearInterval(intervalId);
                        return /* () */0;
                      } else {
                        return /* () */0;
                      }
                    })]));
  }
}

function fromArray(source, _type) {
  if (typeof _type === "number") {
    return /* () */0;
  } else if (_type.tag) {
    return /* () */0;
  } else {
    var sink = _type[0];
    return $$Array.iter((function (a) {
                  return Curry._1(sink, /* Data */Block.__(1, [a]));
                }), source);
  }
}

function fromCallback(source, _type) {
  if (typeof _type === "number") {
    return /* () */0;
  } else if (_type.tag) {
    return /* () */0;
  } else {
    var sink = _type[0];
    return Curry._1(source, (function (a) {
                  return Curry._1(sink, /* Data */Block.__(1, [a]));
                }));
  }
}

function take(max, source, start) {
  if (typeof start === "number") {
    return /* () */0;
  } else if (start.tag) {
    return /* () */0;
  } else {
    var sink = start[0];
    var taken = [0];
    var sourceTalkback = [/* None */0];
    var talkback = function (_type) {
      var match = sourceTalkback[0];
      if (match && taken[0] < max) {
        return Curry._1(match[0], _type);
      } else {
        return /* () */0;
      }
    };
    return Curry._1(source, /* Start */Block.__(0, [(function (_type) {
                      if (typeof _type === "number") {
                        return Curry._1(sink, _type);
                      } else if (_type.tag) {
                        taken[0] = taken[0] + 1 | 0;
                        Curry._1(sink, /* Data */Block.__(1, [_type[0]]));
                        if (taken[0] === max) {
                          Curry._1(sink, /* End */0);
                          var match = sourceTalkback[0];
                          if (match) {
                            return Curry._1(match[0], /* End */0);
                          } else {
                            return /* () */0;
                          }
                        } else {
                          return 0;
                        }
                      } else {
                        sourceTalkback[0] = /* Some */[_type[0]];
                        return Curry._1(sink, /* Start */Block.__(0, [talkback]));
                      }
                    })]));
  }
}

function filter(pred, source, start) {
  if (typeof start === "number") {
    return /* () */0;
  } else if (start.tag) {
    return /* () */0;
  } else {
    var sink = start[0];
    return Curry._1(source, /* Start */Block.__(0, [(function (_type) {
                      if (typeof _type === "number") {
                        return /* () */0;
                      } else if (_type.tag) {
                        if (Curry._1(pred, _type[0])) {
                          Curry._1(sink, _type);
                        }
                        return /* () */0;
                      } else {
                        return Curry._1(sink, _type);
                      }
                    })]));
  }
}

function skip(max, source, start) {
  if (typeof start === "number") {
    return /* () */0;
  } else if (start.tag) {
    return /* () */0;
  } else {
    var sink = start[0];
    var skiped = [0];
    return Curry._1(source, /* Start */Block.__(0, [(function (_type) {
                      if (typeof _type === "number") {
                        return Curry._1(sink, _type);
                      } else if (_type.tag) {
                        skiped[0] = skiped[0] + 1 | 0;
                        if (max < skiped[0]) {
                          return Curry._1(sink, /* Data */Block.__(1, [_type[0]]));
                        } else {
                          return 0;
                        }
                      } else {
                        return Curry._1(sink, _type);
                      }
                    })]));
  }
}

function map(f, source, start) {
  if (typeof start === "number") {
    return /* () */0;
  } else if (start.tag) {
    return /* () */0;
  } else {
    var sink = start[0];
    return Curry._1(source, /* Start */Block.__(0, [(function (t) {
                      if (typeof t === "number" || !t.tag) {
                        return /* () */0;
                      } else {
                        return Curry._1(sink, /* Data */Block.__(1, [Curry._1(f, t[0])]));
                      }
                    })]));
  }
}

exports.observe      = observe;
exports.interval     = interval;
exports.fromArray    = fromArray;
exports.fromCallback = fromCallback;
exports.take         = take;
exports.filter       = filter;
exports.skip         = skip;
exports.map          = map;
/* No side effect */
